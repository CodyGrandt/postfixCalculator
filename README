1) The goal or problem solved by your client program.
- The goal of the client program is to successfully utilize the given stack operations, as well as the given exception handling class file in order to recreate the linux dc postfix desk calculator.  This calculator will read from the standard input and send outputs to the screen as they are called on.  The specific exception handling that is handled by this client program is Underflow, Overflow, a divide by zero error, and an invalid operator error.  This cient program will handle standard integer arithmetic.


2) A clear speciification of all input and output used by client program.
- The client program receives input from the standard input.  Anything can be input, however only numbers, and underscore to represent a negative number, as well as the following letters and symbols: p, n, f, c, d, r, +, -, *, /, and % have any significance in the client program.  Anything else inputted will return an InvalidOperator exception, and the message "Exception -- You have entered an invalid expression. Please re-enter." will be output.  The client program will also output messages for Underflow and Overflow exceptions.  Underflow means that the stack is empty yet the user is trying to access a number from the stack, and will return the message "Illegal Pop -- Stack is Empty."  Overflow means the stack is full yet the user is trying to push another number and will output the message "Illegal Pop -- Stack is Full."  An exception for dividing by zero is also handled, and will output the message "Division By Zero -- Stack Unchanged."  Besides these messages, the only other output carried out by the client program is from the calculator commands.  For example, calling p will print the number on the top of the stack.  Calling f will print the entire stack.  Calling n will print the top of the stack then pop that number from the stack.



3) What classes are used by this program? What are the attributes of these classes? What operations can objects of these classes perform?
- This program mainly utilizes the stack class.  This class forms a stack, which is a Last In First Out data structure.  In the client program, the stack utilized is given the variable name dc.  A stack formed from this class can call upon push(), which lays a variable of a specific data type, but in the case of this client program, an integer, on the top of the stack.  pop() does the opposite and removes the integer from the top of the stack.  Top() returns the integer on the top of the stack.   This stack class also contains TopAndPop(), which both returns the integer on the top of the stack, then removes it using pop().  A stack object from this class can also call upon isEmpty(), which returns a boolean of whether the stack is empty or not, and isFull() which returns true or false depending on if the stack is full or not. Finally, this class also contains makeEmpty() which deletes all integers from the stack.  All of these class methods except for isFull() is used by this client program.  This program also uses the specification file "dsexcpetions.h", which defines various classes used for exeption handling.  This client program uses the defined classes Class Underflow, Class Underflow, and Class DivisionByZero.  This client program also defines its own class for invalid operator exception handling called Class InvalidOperator.



4) A step by step outline of the algorithm used by your client program. In your algorithim, you should mention each of the special calculator specifications that will be handled.
- This client program declares a stack object called dc, as well as a string object called input to store the line inputted by the user. Then the program utilizes a do-while loop to run until end of file from the keyboard is reached. Whenever the user inputs a command, the entire line they inputted is converted into a string object, then the method decipherInput is called and the string object as well as stack dc are passed in as parameters.  The goal of decipherInput is to break down the passed in string a letter at a time, and carry out the corresponding command.  If a number is found, it is send to a string object buildingNum, where a string representing the current number is constructed.  If an underscore is found, this means that a new number is going to follow, so first buildingNum is checked to see if it is empty or not.  If buildingNum is empty, nothing happens, however if it is not empty, the current number represented as a string is converted to an integer using the atoi function, then pushed onto the stack. Once this happens, buildingNum is cleared.  After buildingNum is cleared, a '-' is sent to the front of buildingNum, with the goal of building a negative number.  If the slot afte rthe underscore is not a number, buildingNum is cleared and a zero is pushed onto the stack.  If a blank space is found, the current buildingNum is converted and pushed onto the stack if buildingNum is not empty.  If a letter or symbol is found, first buildingNum is converted and pushed if it is not enpty, then the method operatorApplicator is called, sending the found symbol as well as stack dc in as parameters.  Inside operatorApplicator, a switch statement is utilized with all the possible commands.  Each possible command then calls upon the corresponding method which carries out that command.  For example, passing a '%' into operatorApplicator will cause the switch command to call the method operationRemainder, which will pop the top two values, divide the second by the first, and push the remainder.  It is important to note that inside each operation____ method, the necessary excpetion handling is taken care of, however some do not need any since they are merely accessing information within the stack, while some, such as operationRemainder, have exception handling for Underflow, Overflow, and DivisionByZero.  The switch statement inside operationOperator is also surrounded by try and catch blocks in order to handle any invalid operator passed in as a parameter from decipherInput.  the default case inside the switch statement throws an exception for this issue.  Once control + d is entered, the do-while loop is broken, and the program ends.



